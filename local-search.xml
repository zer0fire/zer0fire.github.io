<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>大数如何加减？- 算法小练</title>
    <link href="/2023/11/22/%E5%A4%A7%E6%95%B0%E5%A6%82%E4%BD%95%E5%8A%A0%E5%87%8F%EF%BC%9F-%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%83/"/>
    <url>/2023/11/22/%E5%A4%A7%E6%95%B0%E5%A6%82%E4%BD%95%E5%8A%A0%E5%87%8F%EF%BC%9F-%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在平时 coding 的时候，如果用到一些数学计算，那么加法和减法必然是我们代码中的常客，但是当一些数字超过 <code>JS</code> 可精确表示的范围时，我们又该如何计算呢？今天给大家带来的就是一个粗浅的算法思路及其实现。如果对我的内容有问题或者疑问，欢迎评论区多多交流。</p><h1 id="理清思路"><a href="#理清思路" class="headerlink" title="理清思路"></a>理清思路</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li>首先要理解，因为 JS 无法准确表示超出 <code>IEEE 754</code> 标准规范的整数。当数字超过 <code>-2^53</code>到<code>2^53</code> 的范围时，无法精确计算 ，因此大数加法和大数减法是利用 <code>string</code> 类型去实现的。</li><li>因为 <code>string</code> 类型无法直接比较大小，需要有个方法比较大小，我这里抽象除了一个 <code>compare</code> 方法。</li><li><code>compare</code> 方法的流程如下，最终返回三种值，<code>-1</code> 表示小于，<code>1</code> 表示大于，<code>0</code> 表示相等。<ul><li>首先比<strong>符号</strong>，负数肯定比正数小。</li><li>其次比<strong>位数</strong>，当符号相同那么从最高位数比，最高位大的负数更小，最高位大的正数更大。</li><li>每位数字从最高位比到最低位，如果中间没有比出大小说明两数<strong>相等</strong>。</li></ul></li><li>加法有进位，减法有借位，这里用 carry 表示，在计算完最后需要做相应的处理，千万不能忘记</li><li>减法根据借位情况，可能会出现前缀 <code>0</code>，这时前缀 <code>0</code> 需要去除，但要注意不要把单独的结果 <code>0</code> 去除 。</li><li>当涉及正负符号的时候，可以先把正负符号的结果通过比较的方式计算出来，然后最后加上符号即可</li></ol><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>为了更加直观的理解这个流程我画了两个简单的流程图</p><p><strong>大数加</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61aa5f1e2a3f4ab0af758277a88cbaad~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=780&h=1150&s=74307&e=png&b=fcfcfc" alt="image.png"></p><p><strong>大数减（带正负号）</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cb9ab6b27db4a5db4e63c7c86bbeb7d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=756&h=611&s=50477&e=png&b=fcfcfc" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3505088142fd411892dfce7603032218~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=664&h=591&s=46459&e=png&b=fcfcfc" alt="image.png"></p><h1 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h1><h2 id="1-compare-方法"><a href="#1-compare-方法" class="headerlink" title="1. compare 方法"></a>1. <code>compare</code> 方法</h2><p><code>compare</code> 方法主要处理了四种比较的情况，负数和正数，正数和负数，负数和负数，正数和正数，前两种情况分别返回 <code>-1</code> 和 <code>1</code> 即可，后两种情况需要比对数位，前面的思路阐述中已经解释过，这里为了篇幅就把详细代码放在最后总结的代码中，这里不再赘述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-keyword">if</span> (a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; !a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">compareNegative</span>(a1, a2);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; !a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">comparePositive</span>(a1, a2);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-大数加"><a href="#2-大数加" class="headerlink" title="2. 大数加"></a>2. 大数加</h2><p>首先获取四个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> carry = <span class="hljs-number">0</span>; <span class="hljs-comment">// 进位</span><br><span class="hljs-keyword">let</span> i = a1.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// a1 的当前位指针，从最后一位开始</span><br><span class="hljs-keyword">let</span> j = a2.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// a2 的当前位指针，从最后一位开始</span><br><span class="hljs-keyword">let</span> arr = []; <span class="hljs-comment">// 结果数据，最后会进行处理和组合</span><br></code></pre></td></tr></table></figure><p>然后通过循环，将数字加起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> (a1[i] || a2[j] || carry) &#123;<br>  <span class="hljs-comment">// 注意这里 a1 和 a2 位数可能不同，因此当有任意一个值，都要继续</span><br>  <span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>; <span class="hljs-comment">// 默认 0</span><br>  <span class="hljs-keyword">if</span> (a1[i]) &#123;<br>    x = <span class="hljs-title class_">Number</span>(a1[i]);<br>  &#125;<br>  <span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>; <span class="hljs-comment">// 默认 0</span><br>  <span class="hljs-keyword">if</span> (a2[j]) &#123;<br>    y = <span class="hljs-title class_">Number</span>(a2[j]);<br>  &#125;<br>  <span class="hljs-keyword">let</span> res = (x + y + carry) % <span class="hljs-number">10</span>; <span class="hljs-comment">// x + y 同时加上进位，对 10 求余，得到当前的加法结果</span><br>  arr.<span class="hljs-title function_">unshift</span>(res); <span class="hljs-comment">// 放到数组最前一位</span><br>  carry = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((x + y + carry) / <span class="hljs-number">10</span>); <span class="hljs-comment">// 计算是否进位</span><br>  i--; <span class="hljs-comment">// 往前移动指针，准备下一位计算</span><br>  j--;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后进行进位处理，返回字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (carry) &#123;<br>  <span class="hljs-comment">// 如果最后还有进位，需要把进位加上</span><br>  arr.<span class="hljs-title function_">unshift</span>(carry);<br>&#125;<br><span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="3-大数减（带正负号）"><a href="#3-大数减（带正负号）" class="headerlink" title="3. 大数减（带正负号）"></a>3. 大数减（带正负号）</h2><p>带正负号首先要确定结果的符号，以下三种情况都是负数，因此 <code>s</code>需要处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 符号</span><br><span class="hljs-keyword">if</span> (<br>  <span class="hljs-comment">// 小减大，负数</span><br>  (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span>) ||<br>  <span class="hljs-comment">// 小减大，正数</span><br>  (a1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>)<br>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">compare</span>(a1, a2) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// -123 - -12</span><br>    s = <span class="hljs-string">&quot;-&quot;</span>;<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>) &#123;<br>  <span class="hljs-comment">// 负数减正数</span><br>  <span class="hljs-comment">// -123 - 789</span><br>  s = <span class="hljs-string">&quot;-&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着开始处理数字，前两种情况，分别是正数减负数，和负数减负数，抽象为去掉符号之后直接加上，即可得到数值结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span> (<br>  <span class="hljs-comment">// 正 - 负</span><br>  (a1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span>) ||<br>  <span class="hljs-comment">// 负 - 正</span><br>  (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>)<br>) &#123;<br>  <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    a1 = a1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (a2[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    a2 = a2.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  res = <span class="hljs-title function_">bigAdd</span>(a1, a2);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<br>  ...<br>) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>后两种情况，正数减正数，负数减负数，去掉符号后通过比较让大数减小数，即可得到数值结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<br>  ...<br>) &#123;<br>...<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>  <span class="hljs-comment">// 正 - 正</span><br>  (a1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>) ||<br>  <span class="hljs-comment">// 负 - 负</span><br>  (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span>)<br>) &#123;<br>  <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    a1 = a1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (a2[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    a2 = a2.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">compare</span>(a1, a2) &gt; <span class="hljs-number">0</span>) &#123;<br>    res = <span class="hljs-title function_">minus</span>(a1, a2);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> tmp = a1<br>    a1 = a2;<br>    a2 = tmp;<br>    res = <span class="hljs-title function_">minus</span>(a1, a2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后通过符号加数值的方式返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;s&#125;</span><span class="hljs-subst">$&#123;res&#125;</span>`</span>;<br></code></pre></td></tr></table></figure><h1 id="细节和注意"><a href="#细节和注意" class="headerlink" title="细节和注意"></a>细节和注意</h1><ol><li><p>底层的 <code>minuse</code> 和 <code>add</code> 实现其实都相对简单，注意进位和借位即可</p></li><li><p>上层的 <code>bigAdd</code> 和 <code>bigMinus</code> 需要比较大小，同符号和异符号可能会产生不同的效果</p></li><li><p>注意加法位数不同导致的问题，当其中任意一者还有内容的时候就必须继续加下去，且这个过程不能直接借助 <code>carry</code> 处理</p></li><li><p>减法需要处理前缀 <code>0</code>，同时要保证不能处理掉结果 <code>0</code></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过字符串的操作就能简单实现对大数的加法和减法，下篇文章计划实现对于大数的乘法和除法，最后的计算结果会更加复杂。</p><p>最后附上完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bigAdd</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-keyword">let</span> carry = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> i = a1.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> j = a2.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">while</span> (a1[i] || a2[j]) &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (a1[i]) &#123;<br>      x = <span class="hljs-title class_">Number</span>(a1[i]);<br>    &#125;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (a2[j]) &#123;<br>      y = <span class="hljs-title class_">Number</span>(a2[j]);<br>    &#125;<br>    <span class="hljs-keyword">let</span> res = (x + y + carry) % <span class="hljs-number">10</span>;<br>    arr.<span class="hljs-title function_">unshift</span>(res);<br>    carry = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((x + y + carry) / <span class="hljs-number">10</span>);<br>    i--;<br>    j--;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (carry) &#123;<br>    arr.<span class="hljs-title function_">unshift</span>(carry);<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 123 23</span><br><span class="hljs-comment">// 23 - 123 = - (123 - 23) =</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bigMin</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-comment">// 负数减负数（去掉符号，大减小）（如果 a2 &gt; a1，正号；如果 a1 &gt; a2，负号）</span><br>  <span class="hljs-comment">// 正数减负数（去掉符号，加起来）（正号）</span><br>  <span class="hljs-comment">// 正数减正数（去掉符号，大减小）（如果 a2 &gt; a1，负号；如果 a1 &gt; a2，正号）</span><br>  <span class="hljs-comment">// 负数减正数（去掉符号，加起来）（负号）</span><br>  <span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-comment">// 小减大，负数</span><br>    (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span>) ||<br>    <span class="hljs-comment">// 小减大，负数</span><br>    (a1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>)<br>  ) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">compare</span>(a1, a2) &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// -123 - -12</span><br>      s = <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>) &#123;<br>    <span class="hljs-comment">// -123 - 789</span><br>    s = <span class="hljs-string">&quot;-&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-comment">// 正 - 负</span><br>    (a1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span>) ||<br>    <span class="hljs-comment">// 负 - 正</span><br>    (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>)<br>  ) &#123;<br>    <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>      a1 = a1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a2[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>      a2 = a2.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    res = <span class="hljs-title function_">bigAdd</span>(a1, a2);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>    <span class="hljs-comment">// 正 - 正</span><br>    (a1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] !== <span class="hljs-string">&quot;-&quot;</span>) ||<br>    <span class="hljs-comment">// 负 - 负</span><br>    (a1[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; a2[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;-&quot;</span>)<br>  ) &#123;<br>    <span class="hljs-keyword">if</span> (a1[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>      a1 = a1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a2[<span class="hljs-number">0</span>].<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>      a2 = a2.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">compare</span>(a1, a2) &gt; <span class="hljs-number">0</span>) &#123;<br>      res = <span class="hljs-title function_">minus</span>(a1, a2);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> tmp = a1;<br>      a1 = a2;<br>      a2 = tmp;<br>      res = <span class="hljs-title function_">minus</span>(a1, a2);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;s&#125;</span><span class="hljs-subst">$&#123;res&#125;</span>`</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">minus</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-keyword">let</span> carry = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> i = a1.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> j = a2.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> arr = [];<br>  <span class="hljs-keyword">while</span> (a1[i]) &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-title class_">Number</span>(a1[i]);<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (a2[j]) &#123;<br>      y = <span class="hljs-title class_">Number</span>(a2[j]);<br>    &#125;<br>    <span class="hljs-keyword">let</span> temp;<br>    <span class="hljs-keyword">if</span> (x - y + carry &lt; <span class="hljs-number">0</span>) &#123;<br>      temp = x + <span class="hljs-number">10</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      temp = x;<br>    &#125;<br>    <span class="hljs-keyword">let</span> res = temp - y + carry;<br>    <span class="hljs-keyword">if</span> (x - y + carry &lt; <span class="hljs-number">0</span>) &#123;<br>      carry = -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      carry = <span class="hljs-number">0</span>;<br>    &#125;<br>    arr.<span class="hljs-title function_">unshift</span>(res);<br>    i--;<br>    j--;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (arr[<span class="hljs-number">0</span>] === <span class="hljs-number">0</span> &amp;&amp; arr.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>    arr.<span class="hljs-title function_">shift</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">a1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">a2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 正负数，比较大数大小</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-keyword">if</span> (a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; !a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">compareNegative</span>(a1, a2);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!a1.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>) &amp;&amp; !a2.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">comparePositive</span>(a1, a2);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compareNegative</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-comment">// 谁位数多谁小</span><br>  <span class="hljs-keyword">if</span> (a1.<span class="hljs-property">length</span> &gt; a2.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1.<span class="hljs-property">length</span> &lt; a2.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (a1[i] &amp;&amp; a2[i]) &#123;<br>      <span class="hljs-comment">/// 123 789</span><br>      <span class="hljs-keyword">if</span> (a1[i] &gt; a2[i]) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1[i] &lt; a2[i]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        i++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">comparePositive</span>(<span class="hljs-params">a1, a2</span>) &#123;<br>  <span class="hljs-keyword">if</span> (a1.<span class="hljs-property">length</span> &gt; a2.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1.<span class="hljs-property">length</span> &lt; a2.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (a1[i] &amp;&amp; a2[i]) &#123;<br>      <span class="hljs-keyword">if</span> (a1[i] &gt; a2[i]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a1[i] &lt; a2[i]) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        i++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker 笔记</title>
    <link href="/2023/11/21/Docker-%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/21/Docker-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-基本概念及基本命令"><a href="#Docker-基本概念及基本命令" class="headerlink" title="Docker 基本概念及基本命令"></a>Docker 基本概念及基本命令</h1><p>container （可读写） -&gt; image （只读） -&gt; image ……</p><p>docker –version</p><!-- run --><!-- 第一次会到 docker hub 拉取镜像 --><p>Docker hub 是官方的镜像社区网站<br>docker container run nginx<br>docker run nginx</p><!-- 展示运行中 --><p>docker container ls<br>docker ps</p><!-- 编号模式 --><p>docker container ls -aq</p><!-- 展示所有 --><p>docker container ps -a<br>docker container ps -aq</p><!-- 关闭 --><p>docker container stop $(docker container ps -aq)<br>docker stop<br>docker container rm $(docker container ps -aq)<br>docker container rm $(code) -f<br>docker rm</p><h1 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h1><!-- 前台模式 attach 模式 --><p>-p 端口映射，前面是本机端口，后面是容器的端口，比如吧 Docker 的 80 映射到就本机的 90，需要 90:80<br>docker container run -p 80:80 nginx</p><!-- 后台模式 detach 模式 --><p>docker container run -d -p 80:80 nginx</p><!-- 后转前 --><p>docker attach $(code)</p><!-- log --><p>docker container logs $(code)</p><!-- 跟踪 log --><p>docker container logs -f $(code)</p><!-- 交互默认 -it --><p>docker container run -it ubuntu sh</p><!-- 退出交互 --><p>容器中输入 “exit”</p><!-- 进入交互模式 --><p>exec 执行，-it 交互模式，sh 交互的方式，用 shell 交互<br>docker exec -it $(code) sh</p><h2 id="获取镜像的几种方式"><a href="#获取镜像的几种方式" class="headerlink" title="获取镜像的几种方式"></a>获取镜像的几种方式</h2><p>pull from registry (online)<br>Dockerfile (online)<br>自有文件导入 (offline)</p><h2 id="示例：-WordPress"><a href="#示例：-WordPress" class="headerlink" title="示例： WordPress"></a>示例： WordPress</h2><p>docker pull wordpress</p><p>docker image</p><!-- 拉取镜像 --><p>docker image pull $(image-name)</p><!-- 查看所有镜像 --><p>docker image ls<br>docker image inspect baf</p><p>官方的方式如果不够的话，可以从其他网站上拉取镜像，比如 <a href="https://quay.io/">https://quay.io</a></p><!-- 从其他网站拉取 --><p>docker image pull quay.io&#x2F;calico&#x2F;node</p><!-- 查看镜像具体信息 --><p>docker image inspect $(image-id&#x2F;name)</p><!-- 删除 --><p>docker image rm</p><!-- 导出镜像 --><p>-o 代表输出，后面代表输出的名字<br>docker image save busybox:latest -o myBusybox.image</p><!-- 导入镜像 --><p>docker image load -i .&#x2F;myBusybox.image</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><ol><li>用于构建 docker 镜像的文件</li><li>包含了构建镜像需要的指令</li><li>有其特定的语法规则</li></ol><p>尝试制作一个镜像，安装一个 ubuntu 系统，并且下载安装 python 环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update &amp;&amp; \<br>DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev<br>print(&quot;Hello JSPang&quot;)<br>python3 hello.py<br></code></pre></td></tr></table></figure><!-- 通过 Dockerfile 构建镜像 --><p>docker image build -t $(image-name) $(file-path)<br>docker image build -t jspang .<br>docker image build -f $(file-name) -t $(image-name)</p><!-- 社区镜像发布，先去一个符合社区的名称 --><p>docker image build -t jspangcom&#x2F;jspang</p><!-- 改名 --><p>docker image tag $(old image name) $(new image name)</p><!-- 推送 --><p>docker login<br>docker image push $(name:[tag])</p><p>docker container run -d $(image-name) -p 80:80</p><!-- Docker file 关键字 --><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>FROM 基础镜像<br>选择镜像的三个基本原则：官方优于非官方，固定版本的 tag 优于 latest (生产项目)，功能满足尽量体积小</p><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>RUN 执行指令。RUN 没一个都是一个分层，所以要适当少用 RUN，否则打包出来的镜像会变大</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:latest<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y wget</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> tar zxf ipinfo_2.0.1_linux_amd64.tar.gz</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mv</span> ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf ipinfo_2.0.1_linux_amd64.tar.gz</span><br></code></pre></td></tr></table></figure><p>正确的 RUN 指令，是把所有的执行命令放到一个 RUN</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:latest<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span><br><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="language-bash">    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mv</span> ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf ipinfo_2.0.1_linux_amd64.tar.gz</span><br></code></pre></td></tr></table></figure><h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><p>复制普通文件，如果复制的路径不存在，就会自动创建（可以复制本地文件）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:alpine3.<span class="hljs-number">14</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> index.js  /app/index.js</span><br></code></pre></td></tr></table></figure><h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>ADD 和 COPY 稍微不同，ADD 会解压 gzip 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:alpine3.<span class="hljs-number">14</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> index.tar  /app/</span><br></code></pre></td></tr></table></figure><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>切换工作目录，比如切换到 &#x2F;app 工作目录，所有操作会进入 &#x2F;app 下执行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:alpine3.<span class="hljs-number">14</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> index.tar  index.js</span><br></code></pre></td></tr></table></figure><h2 id="ARG-和-ENV-变量"><a href="#ARG-和-ENV-变量" class="headerlink" title="ARG 和 ENV 变量"></a>ARG 和 ENV 变量</h2><p>注意 ENV 变量值不能有任何空格，ARG 也是，在普通变量上没什么区别，两者都行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:latest<br><span class="hljs-comment"># ARG VERSION=2.0.1</span><br><span class="hljs-keyword">ENV</span> VERSION=<span class="hljs-number">2.0</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span><br><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="hljs-variable">$&#123;VERSION&#125;</span>/ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="language-bash">    tar zxf ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mv</span> ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz</span><br></code></pre></td></tr></table></figure><p>两者的区别</p><ol><li>ARG 是构建环境，ENV 是可以带到镜像中，镜像中 <code>env</code> 命令可以看到 ENV 变量</li><li>ARG 可以在构建中改变，ENV 不可变，使用 –build-arg $()</li></ol><p>docker image build -f Dockerfile.ARG -t ipinfo-arg-2.0.0 –build-arg $(arg-name)&#x3D;$(arg-value) $(dir)</p><h2 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h2><!-- 批量删除已经退出的容器 --><p>docker system prune -f</p><!-- 批量删除所有没有在使用的镜像 --><p>docker image prune -a</p><p>CMD 命令需要遵守几个规则</p><ol><li>容器启动时默认执行</li><li>如果 docker container run 启动时制定了其他命令，那么 CMD 失效</li><li>如果定义了多个 CMD，只有最后一个 CMD 生效</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:latest<br><span class="hljs-keyword">ENV</span> VERSION=<span class="hljs-number">2.0</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span><br><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="hljs-variable">$&#123;VERSION&#125;</span>/ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="language-bash">    tar zxf ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mv</span> ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf ipinfo_<span class="hljs-variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;ipinfo&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p>ENTRYPOINT 也是设置容器启动时要执行的命令，但和 CMD 有区别</p><ol><li>CMD 设置的命令，可以再 docker container run 传入其他命令覆盖，但是 ENTRYPOINT 一定会执行</li><li>ENTRYPOINT 可以和 CMD 联合使用，ENTRYPOINT 设置执行的方法， CMD 用于传参数</li></ol><p>docker container run –rm -t demo-entrypoint echo “jspang.com”</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">21.04</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;echo&quot;</span>]</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> []</span><br></code></pre></td></tr></table></figure><h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h2><p>VOLUME [“&#x2F;${dir name}”] 访问文件夹，没有就创建</p><p>docker history $(image-id) 具体镜像的分层情况</p><p>docker container run -d my-image<br>docker container exec -it $(ID) sh</p><p>docker image build -f Dockerfile-cmd -t demo-cmd<br>docker container run -it demo-cmd</p><!-- volume 镜像数据本地持久化 --><p>docker volume ls<br>docker volume inspect $(volume-name|data-name)<br>docker -v $(data-name):$(data-path)<br>docker container run -d -v my-data:&#x2F;app my-image<br>docker volume ls<br>docker container ls</p><!-- 删除容器 --><p>docker container rm -f e00</p><!-- 从 volume 中恢复数据 --><p>docker container run -d -v my-data:&#x2F;app my-image</p><!-- Bind mount 数据持久化，绑定到自定义位置 --><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker container run -it -v $&#123;pwd&#125;:/app node sh<br><br>docker container run<br><br>docker container inspect --format &#x27;&#123;&#123;.Config.ExposedPorts&#125;&#125;&#x27; `&lt;ContainerID&gt;`<br><br>docker-compose.yml<br><br>docker-compose 复用命令、shell 形式，可以执行多条命令<br><br>docker compose up<br>docker compose up -d<br>docker compose ps<br>docker-compose -p $(container name) up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React Doc 1</title>
    <link href="/2023/11/21/React-Doc-1/"/>
    <url>/2023/11/21/React-Doc-1/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-React"><a href="#What-is-React" class="headerlink" title="What is React"></a>What is <code>React</code></h1><p><code>React</code> is a web UI library that published by meta group, and it is used to build you own web page more easily and quickly</p><h1 id="Built-in-React-Hooks"><a href="#Built-in-React-Hooks" class="headerlink" title="Built-in React Hooks"></a>Built-in <code>React</code> Hooks</h1><p>Hooks let you use different <code>React</code> features from your components. You can either use the built-int Hooks of combine them to build your own. This page lists all built-int hooks in <code>React</code></p><h2 id="State-Hooks"><a href="#State-Hooks" class="headerlink" title="State Hooks"></a>State Hooks</h2><p>State hooks let a component “remember” information like user input. For example, a form component can use state to store the input value, while an image gallery component can use state to store the selected image index</p><p><code>useState</code> declares a state variable that you can update directly</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useReducer</code> declares a state variable with the update logic inside a reducer function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducerFunc</span>(<span class="hljs-params">initState, action</span>) &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [store, dispatch] = <span class="hljs-title function_">useReducer</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;, reducerFunc);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;store.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Context-Hooks"><a href="#Context-Hooks" class="headerlink" title="Context Hooks"></a>Context Hooks</h2><p>Context hooks lets a component receive information from distant parents without passing it as props. For example, your app’s top-level component can pass the current UI theme to all components below, no matter how deep</p><p><code>useContext</code> - <code>createContext</code> - <code>createPortal</code><br>reads and subscribes to a context</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title function_">createContext</span>(&#123; <span class="hljs-attr">fontSize</span>: <span class="hljs-number">10</span> &#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Ref-hooks"><a href="#Ref-hooks" class="headerlink" title="Ref hooks"></a>Ref hooks</h2><p>Ref hooks let a component hold some information that isn’t used for rendering, like a DOM node or a timeout ID. Unlike with state, updating a ref does not re-render your component, Refs are an “escape hatch”[逃生口] from the <code>React</code> paradigm[范式]<br>. They are useful when you need to work with non-<code>React</code> systems, such as the built-int browser APIs, like Canvas APIs, Web socket APIs</p><p><code>useRef</code> declares a ref. You can hold any value in it, but most often it’s used to hold a DOM node.</p><p><code>useImperativeHandle</code> lets you customized the ref exposed by your component. This is rarely used</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    inputRef.<span class="hljs-title function_">focus</span>();<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Effect-Hooks"><a href="#Effect-Hooks" class="headerlink" title="Effect Hooks"></a>Effect Hooks</h2><p>Effect hooks let a component connect to and synchronize with external systems. This includes dealing the network, browser DOM, animations, widgets written using a different UI library, and other non-<code>React</code> code</p><p><code>useEffect</code> connects a component to an external system, runs side effect or any other function. Effect hooks are an “escape hatch” from the <code>React</code> paradigm. (asynchronous)</p><p>Don’t use Effects to orchestrate the data flow of your application. If you’re not interacting with an external system, you might not need an Effect</p><p><code>useLayoutEffect</code> fires before the browser repaints the screen, You can measure layout here(synchronous)</p><p><code>useInsertionEffect</code> fires before <code>React</code> make changes to the DOM. Libraries can insert dynamic CSS here</p><h2 id="Performance-Hooks"><a href="#Performance-Hooks" class="headerlink" title="Performance Hooks"></a>Performance Hooks</h2><p>a common way tp optimize re-rendering performance is to skip unnecessary work. For example you can tell <code>React</code> to reuse a cached calculation or to skip a re-render if the data has not changed since the previous render</p><p>To skip calculation and unnecessary re-rendering, use one of these Hooks:</p><p>(Use these hooks to make some performance optimization<br>)</p><p><code>useMemo</code>, lets you cache the result of an expensive calculation. memoized this value until the dependence be changed</p><p><code>useCallback</code>, lets you cache a function definition before passing it down to an optimized component. memoized the function until the dependence be changed</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params">&#123; todos, tab, theme &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">filterTodos</span>(todos, tab), [todos, tab]);<br>  <span class="hljs-keyword">const</span> callback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> inputRef.<span class="hljs-title function_">focus</span>(), [inputRef]);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useTransition</code>, lets you mark a state transition as non-blocking and allow other updates to interrupt it. schedule some asynchronous task in a delay time</p><ul><li><code>flushSync</code></li></ul><p><code>useDeferredValue</code> let you defer updating a non-critical part of the UI and lets other parts update first</p><h2 id="Other-Hooks"><a href="#Other-Hooks" class="headerlink" title="Other Hooks"></a>Other Hooks</h2><p>These Hooks are mostly useful to library authors and aren’t commonly used in the application code</p><p><code>useDebugValue</code> lets you customize the label <code>React</code> DevTools displays for your custom Hook</p><p><code>useId</code> lets a components associate a unique ID with itself, Typically used with accessibility APIs</p><p><code>useSyncExternalStore</code> lets a component subscribe to an external store</p><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>What is the difference between Meta-framework and library</p><h1 id="API-Reference-Hooks"><a href="#API-Reference-Hooks" class="headerlink" title="API Reference - Hooks"></a>API Reference - Hooks</h1><h2 id="State-Hooks-1"><a href="#State-Hooks-1" class="headerlink" title="State Hooks"></a>State Hooks</h2><p><code>useState</code> is a <code>React</code> Hook that lets you add a state variable to your component</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">28</span>);<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Taylor&quot;</span>);<br>  <span class="hljs-keyword">const</span> [todos, setTodos] = <span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">createTodos</span>());<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;Taylor&quot;</span>);<br>    <span class="hljs-title function_">setAge</span>(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> a + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useReducer</code> is <code>React</code> hook that lets you add a reducer to your component</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;increment_age&quot;</span> &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Context-Hooks-1"><a href="#Context-Hooks-1" class="headerlink" title="Context Hooks"></a>Context Hooks</h2><p>These two State hooks are all only update the state variable for the next render</p><p><code>useContext</code> is a <code>React</code> hooks that lets you read and subscribe to context from your component</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-string">`React`</span>.<span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [theme, setTheme] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;light&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyComp</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-keyword">const</span> className = <span class="hljs-string">`panel-<span class="hljs-subst">$&#123;theme&#125;</span>`</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>high level usage</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [currentUser, setCurrentUser] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> login = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">storeCredential</span>(res.<span class="hljs-property">credentials</span>);<br>    <span class="hljs-title function_">setCurrentUser</span>(res.<span class="hljs-property">user</span>);<br>  &#125;, []);<br>  <span class="hljs-keyword">const</span> contextVal = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    currentUser, login;<br>  &#125;, [currentUser, login]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AuthContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;contextVal&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Page</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">AuthContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useDeferredValue</code> defer updating a part of the UI(maybe more like macro task)</p><p>Parameters of <code>useDeferredValue</code> is <code>value</code> that you want to defer</p><p>Indicating[表示] that the content is stable<br><code>useDeferredValue</code> return a defer value, It can compare with stable value, when the defer value equal the state value, represent the defer value is stable and don’t need rerender</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SearchPage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [query, setQuery] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [deferredQuery] = <span class="hljs-title function_">useDeferredValue</span>(query);<br>  <span class="hljs-keyword">const</span> isStable = query !== deferredQuery;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">h2</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">opacity:</span> <span class="hljs-attr">isStale</span> ? <span class="hljs-attr">0.5</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">transition:</span> <span class="hljs-attr">isStale</span></span></span><br><span class="hljs-tag"><span class="language-xml">              ? &quot;<span class="hljs-attr">opacity</span> <span class="hljs-attr">0.2s</span> <span class="hljs-attr">0.2s</span> <span class="hljs-attr">linear</span>&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">opacity</span> <span class="hljs-attr">0s</span> <span class="hljs-attr">0s</span> <span class="hljs-attr">linear</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useTransition</code> update the state without blocking the UI (maybe more like micro task)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TabContainer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPending, startTransition] = <span class="hljs-title function_">useTransition</span>();<br>  <span class="hljs-keyword">const</span> [tab, setTab] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;about&quot;</span>);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">selectTab</span>(<span class="hljs-params">nextTab</span>) &#123;<br>    <span class="hljs-title function_">startTransition</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTab</span>(nextTab);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (isPending) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pending&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useImperativeHandle</code> customize the handle exposed as a ref</p><p>exposing a custom ref handle to the parent component</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">MyInput</span>(<span class="hljs-params">props, ref</span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = (useRef = <span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useImperativeHandle</span>(<br>    ref,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment">// ...method</span><br>        <span class="hljs-title function_">focus</span>(<span class="hljs-params"></span>) &#123;<br>          inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>        &#125;,<br>        <span class="hljs-title function_">scrollIntoView</span>(<span class="hljs-params"></span>) &#123;<br>          inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">scrollIntoView</span>();<br>        &#125;,<br>      &#125;;<br>    &#125;,<br>    []<br>  );<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>exposing your own imperative methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Post</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> commentsRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> addCommentsRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useImperativeHandle</span>(<br>    ref,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">scrollAndFocusAddComment</span>(<span class="hljs-params"></span>) &#123;<br>          commentRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">scrollToBottom</span>();<br>          addCommentsRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>        &#125;,<br>      &#125;;<br>    &#125;,<br>    []<br>  );<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Comment</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;commentsRef&#125;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AddComment</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;addCommentsRef&#125;</span> /&gt;</span></span><br>  )<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>useInsertionEffect</code> allows inserting elements into the DOM before any layout effects fire</p><p>injecting dynamic styles from CSS-in-JS libraries</p><p><code>useEffect</code> and <code>useInsertionEffect</code> don’t run on the server. If app need to collect which CSS rules have been used on the server, you can do it during rendering</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// server</span><br><span class="hljs-keyword">let</span> collectedRulesSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br><span class="hljs-keyword">let</span> isInserted = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useCss</span>(<span class="hljs-params">rule</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> === <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>    collectedRulesSet.<span class="hljs-title function_">add</span>(rule);<br>  &#125;<br><br>  <span class="hljs-title function_">useInsertionEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isInserted.<span class="hljs-title function_">has</span>(rule)) &#123;<br>      isInserted.<span class="hljs-title function_">add</span>(rule);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">getStyleForRule</span>(rule));<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> rule;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> className = <span class="hljs-title function_">useCss</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useRef</code> reference a value that’s not needed for rendering</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>State<br><code>useState</code><br><code>useReducer</code></p><p>Context<br><code>useContext</code></p><p>Reference<br><code>useRef</code> export a ref value, not mutable, and it can’t trigger rerender in <code>React</code> environment<br><code>useImperativeHandle</code> export customize ref</p><p>Side Effect<br><code>useEffect</code> after DOM change, asynchronous state<br><code>useInsertionEffect</code> before DOM change<br><code>useLayoutEffect</code> before repaint, synchronous state</p><p>Optimization<br><code>useMemo</code> memoized a value<br><code>useCallback</code> memoized a function<br><code>useTransition</code> not important, defer value<br><code>useDeferredValue</code> defer updating a part of the UI</p><p>Other<br><code>useId</code> generate id<br><code>useDebugValue</code> <code>React</code> devtools, use it set value<br><code>useSyncExternalStore</code> subscribe a external state store</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>职业忠告-半佛-人间修炼指南</title>
    <link href="/2023/11/21/%E8%81%8C%E4%B8%9A%E5%BF%A0%E5%91%8A-%E5%8D%8A%E4%BD%9B-%E4%BA%BA%E9%97%B4%E4%BF%AE%E7%82%BC%E6%8C%87%E5%8D%97/"/>
    <url>/2023/11/21/%E8%81%8C%E4%B8%9A%E5%BF%A0%E5%91%8A-%E5%8D%8A%E4%BD%9B-%E4%BA%BA%E9%97%B4%E4%BF%AE%E7%82%BC%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<ul><li><p>你干的职位，是抓个人就能做的消耗岗位，还是有升职空间，能够给你更多技能成长的核心岗位？如果干得不顺心要跳槽，这家公司能给你带来什么样的加成？这些信息都会成为择业时的关键要素。</p></li><li><p>每一份工作，都要能帮你在找下一份工作的时候拿到选择权，不然将毫无意义。</p></li><li><p>现在一个大厂和小厂都让你加班，大厂加班三年，猎头能打爆你的电话，小厂加班三年，你可能只能拿着不能变现的期权吃散伙饭，散伙之后下家别人还压你价。</p></li><li><p>更深层次的，你还要私下调查一下以前在这公司干过的人，对公司的历史风评怎么样。</p></li><li><p>有些公司就是喜欢忙的时候突击招人，度过高峰期再二话不说地就把找来的实习生踹了，这种信息在网上一问就知道，但你不知道，往里冲，就可能会变成工具人</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo 部署</title>
    <link href="/2023/10/24/hexo-%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/10/24/hexo-%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="几条常用的命令"><a href="#几条常用的命令" class="headerlink" title="几条常用的命令"></a>几条常用的命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清理</span><br>hexo clean<br>hexo generate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新增</span><br>hexo new<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>hexo server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">部署</span><br>hexo deploy<br></code></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>点击<a href="https://github.com/fluid-dev/hexo-theme-fluid">这里</a>查看当前主题文档</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/24/hello-world/"/>
    <url>/2023/10/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
